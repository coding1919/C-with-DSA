Number:
1. integer (int) - 1,2,3.........
2. float - 1.2, 2.8......
3. double - 2.763, 5.7873..........

character (char) - a,b,c......
string - how are you
boolean - yes or no (1,0)

by the above way we communicate with computers

primitive data types:
  int      name      =  10 -> value
   |         |       |
   V         V       V  
datatype  variable  assignment

name is a variable of type int of 4 bytes which stores a value 10
4bytes = 32bit (standard - all sizes) (to keep track or read - by fixed size)
00000000 00000000 00000000 00001010 (10)

  char       c       =  'a' -> value
   |         |       |
   V         V       V  
datatype  variable  assignment

c is a variable of type char of 1 bytes which stores a value 'a'
character (single character) must be enclosed within single quotes
1bytes = 8bit
01100001 (97) - 'a' (ASCII)

 float       f       =  2.8 -> value
   |         |       |
   V         V       V  
datatype  variable  assignment

f is a variable of type float of 4 bytes which stores a value 2.8
4bytes = 32bit
2.8  - 10.1100(repeating)

more than 32 bit integer can be stored using long int which is 64bit - 8 bytes

same way double is used to store decimal with 8 bytes that is 64 bit

  bool       b       =  1(true) or 0(false) -> value
   |         |       |
   V         V       V  
datatype  variable  assignment

b is a variable of type boolean of 1 bytes which stores a value 1 or 0 or true or false
1bytes = 8bit
0  - 00000000 (false)
1  - 00000001 (true)


variable - containers to store data
variable name -> alphabets, 0-9, _
starting must not be 0-9 (numbers)
start with _ or alphabets
meaning full name
identifier - the name which is given by us

note:
all data or value is pointed to the first bit and based on the standard of the data type like in int 4 bytes which is 32 bit so it will check from starting pointed first bit to 32 bit and what that data within 32 bit is accessed


negative number:
int - 4 bytes - 32 bit - maximum number is 2^32

making it half for +ve and half for +ve
in case of 3 bit - 2^3 - 8 possibility
so 4 possibility -ve
and 4 possibility +ve

if first bit is 0 then +ve
000 - 0
001 - 1
010 - 2
011 - 3
if first bit is 1 then -ve
100 - 0
101 - -1
110 - -2
111 - -3

100 and 000 gives the same number 0
so they changed the pattern like this
100 - -4
101 - -3
110 - -2
111 - -1

how to convert -2?
2 - 010
1's complement - 101
2's complement - 101 
                  +1
                 110 - -2

               2^3
              /   \
 (-ve)-1to-2^2     0to(2^2-1)

             int 32bit
              /   \
          2^31     2^31
    -1to-2^31       0to(2^31-1)

sizeof() - it will tell the bytes of the data type


int a = 10 and char c = 'b' 
a = c -> then it will give 99 as a ASCII number of small letter b
c = a -> then it will give the ASCII character which has value 10
400 (int to char) - will be a long binary number of 32 bit and character is 8 bit so it can store 8 bit and remaining 24 bit are loss
type casting : converting data from one type to another
type casting can cause data loss mostly
1. conversion (implicit) - small to big 
float(4 bytes) to double(8 bytes)
2. casting (explicit)(manually) - big to small
double(8 bytes) to float(4 bytes)

cin - for input
cout and cin are not functions they are global objects
<<, >> - these are overloaded operators

Operators:

Arithmetic - +,-,*,/,%
    int/int = int
    float/int = float
    double/int = double
    int/float = float
    int/double = double

Relational - <,<=,>,>=,==,!= -> it returns true or false | 1 or 0

Logical - || (OR), && (AND), !(NOT)


Unary Operators: single operand

increment (++) (a=a+1)
a++ -> work , then update - post increment (first a will be assigned and then a will be updated)
++a -> update , then work - pre increment (first a will be updated and then a is assigned )

decrement (--) (a=a-1)
a-- -> work , then update - post decrement (first a will be assigned and then a will be updated)
--a -> update , then work - pre decrement (first a will be updated and then a is assigned )